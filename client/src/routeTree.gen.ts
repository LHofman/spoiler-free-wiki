/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PagesPageIdIndexImport } from './routes/pages/$pageId/index'
import { Route as PagesPageIdEditImport } from './routes/pages/$pageId/edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PagesPageIdIndexRoute = PagesPageIdIndexImport.update({
  id: '/pages/$pageId/',
  path: '/pages/$pageId/',
  getParentRoute: () => rootRoute,
} as any)

const PagesPageIdEditRoute = PagesPageIdEditImport.update({
  id: '/pages/$pageId/edit',
  path: '/pages/$pageId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/$pageId/edit': {
      id: '/pages/$pageId/edit'
      path: '/pages/$pageId/edit'
      fullPath: '/pages/$pageId/edit'
      preLoaderRoute: typeof PagesPageIdEditImport
      parentRoute: typeof rootRoute
    }
    '/pages/$pageId/': {
      id: '/pages/$pageId/'
      path: '/pages/$pageId'
      fullPath: '/pages/$pageId'
      preLoaderRoute: typeof PagesPageIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pages/$pageId/edit': typeof PagesPageIdEditRoute
  '/pages/$pageId': typeof PagesPageIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pages/$pageId/edit': typeof PagesPageIdEditRoute
  '/pages/$pageId': typeof PagesPageIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pages/$pageId/edit': typeof PagesPageIdEditRoute
  '/pages/$pageId/': typeof PagesPageIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pages/$pageId/edit' | '/pages/$pageId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pages/$pageId/edit' | '/pages/$pageId'
  id: '__root__' | '/' | '/pages/$pageId/edit' | '/pages/$pageId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PagesPageIdEditRoute: typeof PagesPageIdEditRoute
  PagesPageIdIndexRoute: typeof PagesPageIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PagesPageIdEditRoute: PagesPageIdEditRoute,
  PagesPageIdIndexRoute: PagesPageIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pages/$pageId/edit",
        "/pages/$pageId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pages/$pageId/edit": {
      "filePath": "pages/$pageId/edit.tsx"
    },
    "/pages/$pageId/": {
      "filePath": "pages/$pageId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
